//
// Cornflex mixins
//


// generate everything
@mixin cornflex() {

  // base rules
  @include cornflex-base();

  // mobile first rules
  @include cornflex-row();
  @include cornflex-col();

  // responsive rules
  @each $bp, $bp-value in $cornflex-breakpoints {
    @media (min-width: $bp-value) {
      @include cornflex-container($bp, $bp-value);
      @include cornflex-row($bp);
      @include cornflex-col($bp);
    }
  }

}


// generate breakpoint suffix based on name
@function cornflex-breakpoint($bp: null) {
  @return if($bp, #{'-'+$bp}, null);
}


// generate base rules needed only once
@mixin cornflex-base() {

  // box sizing
  .container, [class*="container-"],
  .row, .col, [class*="col-"] {
    box-sizing: border-box;
  }

  // container
  .container, [class*="container-"] {
    padding: 0 $cornflex-gutter;
    margin: auto;
  }

  // row
  .row {
    display: flex;
    flex-wrap: wrap;

    // gutter
    &-gutter {
      margin: 0 -#{$cornflex-gutter-half};
      .col, [class*="col-"] { padding: 0 #{$cornflex-gutter-half} }
    }

    // reverse
    &-rtl { flex-direction: row-reverse }
  }

  // col
  .col, [class*="col-"] {
    display: flex;
    flex-grow: 1;
  }

}


// generate container rules for a specific breakpoint
@mixin cornflex-container($bp: null, $bp-value: 0) {
  @if($bp-value > 0) {
    $-bp: cornflex-breakpoint($bp);
    .container#{$-bp} { max-width: $bp-value }
  }
}


// generate row rules for a specific breakpoint
@mixin cornflex-row($bp: null) {
  $-bp: cornflex-breakpoint($bp);
  .row {

    // justify
    &-left#{$-bp} { justify-content: flex-start }
    &-center#{$-bp} { justify-content: center }
    &-right#{$-bp} { justify-content: flex-end }
    &-between#{$-bp} { justify-content: space-between }
    &-around#{$-bp} { justify-content: space-around }

    // align
    &-top#{$-bp} { align-items: flex-start }
    &-middle#{$-bp} { align-items: center }
    &-bottom#{$-bp} { align-items: flex-end }

  }
}


// generate col rules for a specific breakpoint
@mixin cornflex-col($bp: null) {
  $-bp: cornflex-breakpoint($bp);
  .col {

    // fluid
    &#{$-bp} { max-width: 100% }

    // sized
    @for $i from 1 through $cornflex-cols {
      $col-width: 100% / $cornflex-cols * $i;
      &-#{$i}#{$-bp} {
        @if($bp) { display: flex }
        flex-basis: $col-width;
        max-width: $col-width;
      }
    }

    // order
    @for $i from 1 through $cornflex-cols {
      &-nth-#{$i}#{$-bp} { order: $i }
    }

    // shift
    $shift-start: if($bp, 0, 1);
    @for $i from $shift-start through ($cornflex-cols - 1) {
      &-shift-#{$i}#{$-bp} {
        margin-left: 100% / $cornflex-cols * $i;
      }
    }

    // align
    &-top#{$-bp} { align-self: flex-start }
    &-middle#{$-bp} { align-self: center }
    &-bottom#{$-bp} { align-self: flex-end }

    // hide
    &-hide#{$-bp} { display: none }

  }
}